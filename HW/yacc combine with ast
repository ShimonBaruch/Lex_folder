%{
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

typedef struct node {
    char *token;
    struct node *left;
    struct node *right;
} node;

node *mknode(char *token, node *left, node *right);
void printtree(node *tree, int tabs);
void yyerror(const char *s);

#define YYSTYPE struct node*
%}

%token BOOL CHAR INT DOUBLE FLOAT STRING INT_PTR CHAR_PTR DOUBLE_PTR FLOAT_PTR
%token IF ELSE WHILE FOR VAR ARGS PUBLIC PRIVATE STATIC RETURN NULLPTR VOID DO
%token AND OR EQ NE LE GE LT GT PLUS MINUS TIMES DIVIDE NOT ADDR ASSIGN
%token INT_LIT STRING_LIT CHAR_LIT ID
%token SEMICOLON COMMA LBRACE RBRACE LPAREN RPAREN LBRACKET RBRACKET COLON

%left '+' '-'
%left '*' '/'

%%

program:
    functions
    ;

functions:
    function
    | functions function
    ;

function:
    visibility type ID LPAREN parameters RPAREN static_opt LBRACE body RBRACE
    ;

visibility:
    PUBLIC
    | PRIVATE
    ;

type:
    BOOL
    | CHAR
    | INT
    | DOUBLE
    | FLOAT
    | STRING
    | INT_PTR
    | CHAR_PTR
    | DOUBLE_PTR
    | FLOAT_PTR
    | VOID
    ;

parameters:
    /* empty */
    | parameter_list
    ;

parameter_list:
    parameter
    | parameter_list COMMA parameter
    ;

parameter:
    type COLON ID
    ;

static_opt:
    /* empty */
    | STATIC
    ;

body:
    declarations statements
    ;

declarations:
    /* empty */
    | declaration declarations
    ;

declaration:
    VAR type COLON var_list SEMICOLON
    ;

var_list:
    ID
    | var_list COMMA ID
    ;

statements:
    /* empty */
    | statement statements
    ;

statement:
    assignment SEMICOLON
    | function_call SEMICOLON
    | if_statement
    | while_statement
    | for_statement
    | do_while_statement
    | block
    | RETURN expression SEMICOLON
    ;

assignment:
    ID ASSIGN expression
    | TIMES ID ASSIGN expression
    ;

function_call:
    ID LPAREN args RPAREN
    ;

args:
    /* empty */
    | arg_list
    ;

arg_list:
    expression
    | arg_list COMMA expression
    ;

if_statement:
    IF LPAREN expression RPAREN statement
    | IF LPAREN expression RPAREN statement ELSE statement
    ;

while_statement:
    WHILE LPAREN expression RPAREN statement
    ;

for_statement:
    FOR LPAREN assignment SEMICOLON expression SEMICOLON assignment RPAREN statement
    ;

do_while_statement:
    DO statement WHILE LPAREN expression RPAREN SEMICOLON
    ;

block:
    LBRACE statements RBRACE
    ;

expression:
    INT_LIT
    | STRING_LIT
    | CHAR_LIT
    | ID
    | expression PLUS expression
    | expression MINUS expression
    | expression TIMES expression
    | expression DIVIDE expression
    | MINUS expression
    | NOT expression
    | expression EQ expression
    | expression NE expression
    | expression LE expression
    | expression GE expression
    | expression LT expression
    | expression GT expression
    | expression AND expression
 
