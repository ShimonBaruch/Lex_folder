%{
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "node.h"

void yyerror(const char *s);
int yylex(void);

node *ast_root = NULL;
%}

%union {
    struct node *node;
    char *string;
}

%token <string> COMMENT WHILE IF ELSE FOR 
%token <string> RETURN
%token <string> BOOL STRING CHARPTR CHAR INT INTPTR PROCEDUR
%token <string> AND ADDRESS EQL ASSIGNMENT OR LENGTH GREATEREQL GREATER LESSEQL LESS NOTEQL NOT
%token <string> DIVISION PLUS MINUS MULTI VARIABLE
%token <string> STRING_LTL REAL_LTL CHAR_LTL NULLL
%token <string> MAIN IDENTIFIER SEMICOLON COMMA OPENPAREN CLOSEPAREN OPENBRACKET CLOSEBRACKET OPENBRACE CLOSEBRACE
%token <string> DECIMAL_LTL HEX_LTL BOOLTRUE BOOLFALSE  REAL REALPTR FUNCTION COLON  DEREFERENCE 

%left PLUS MINUS RETURN
%left MULTI DIVISION
%left EQL NOTEQL LESS LESSEQL GREATEREQL GREATER OR AND
%left SEMICOLON 
%right NOT CLOSEBRACE

%nonassoc IDENTIFIER 
%nonassoc OPENPAREN
%nonassoc IF
%nonassoc ELSE 

%type <node> address_expr address_exprs stmnts stmnt_block dereference_expr  expr_list call_func 
%type <node> expr lhs assignment_stmnt new_block 
%type <node> stmnt type_pro type_id var_id declear paren_expr
%type <node> pro_body para_list para_pro procedure procedures
%type <node> main program project declears RET

%%

// Main project
project: cmmnt program { Printtree($2); printf("syntax valid\n"); };

program: procedures main { $$ = mknode("CODE", $1, $2); }

// comments
cmmnt: COMMENT cmmnt | ;

// this is the main
main: PROCEDUR MAIN OPENPAREN CLOSEPAREN OPENBRACE pro_body CLOSEBRACE
{
$$ = mknode("proc",
mknode("Main", mknode("\n", NULL, NULL), NULL),
mknode("ARGS", NULL, $6));
}
| { $$ = NULL; };

// functions
procedures: procedures  procedure { $$ = mknode("", $1, $2); }
| { $$ = NULL; };

// function
procedure: PROCEDUR type_pro IDENTIFIER OPENPAREN para_list CLOSEPAREN OPENBRACE stmnt_block CLOSEBRACE
{
$$ = mknode("proc", mknode($3, mknode("\n", NULL, NULL), $5), mknode("ARGS", NULL, $8));
}
| PROCEDUR type_pro IDENTIFIER OPENPAREN CLOSEPAREN OPENBRACE stmnt_block CLOSEBRACE
{
$$ = mknode("proc", mknode($3, mknode("\n", NULL, NULL), NULL), mknode("ARGS", NULL, $7));
};

// parameter list
para_list: para_list COMMA para_pro { $$ = mknode("PARA", $1, $3); }
| para_pro { $$ = mknode("PARA", NULL, $1); };

// parameter
para_pro: type_pro IDENTIFIER { $$ = mknode($2, NULL, NULL); };

// type
type_pro: BOOL { $$ = mknode("BOOL", NULL, NULL); }
| STRING { $$ = mknode("STRING", NULL, NULL); }
| CHARPTR { $$ = mknode("CHARPTR", NULL, NULL); }
| CHAR { $$ = mknode("CHAR", NULL, NULL); }
| INT { $$ = mknode("INT", NULL, NULL); }
| INTPTR { $$ = mknode("INTPTR", NULL, NULL); }
| REAL { $$ = mknode("REAL", NULL, NULL); }
| REALPTR { $$ = mknode("REALPTR", NULL, NULL); };

// body
pro_body: stmnt_block { $$ = $1; }
| { $$ = NULL; };

// statement block
stmnt_block: OPENBRACE stmnts CLOSEBRACE { $$ = $2; }
| stmnts { $$ = $1; };

// statements
stmnts: stmnts stmnt { $$ = mknode("STMNT", $1, $2); }
| stmnt { $$ = mknode("STMNT", NULL, $1); };

// statement
stmnt: assignment_stmnt { $$ = $1; }
| RETURN expr SEMICOLON { $$ = mknode("RETURN", $2, NULL); }
| IF expr stmnt { $$ = mknode("IF", $2, $3); }
| IF expr stmnt ELSE stmnt { $$ = mknode("IFELSE", mknode("IF", $2, $3), $5); }
| WHILE expr stmnt { $$ = mknode("WHILE", $2, $3); }
| FOR assignment_stmnt expr SEMICOLON expr stmnt { $$ = mknode("FOR", $2, mknode("COND", $3, mknode("INCR", $5, $6))); }
| PROCEDUR IDENTIFIER OPENPAREN para_list CLOSEPAREN stmnt_block { $$ = mknode("PROCEDUR", mknode($2, NULL, $4), $6); }
| PROCEDUR IDENTIFIER OPENPAREN CLOSEPAREN stmnt_block { $$ = mknode("PROCEDUR", mknode($2, NULL, NULL), $5); }
| { $$ = NULL; };

// assignment statement
assignment_stmnt: lhs ASSIGNMENT expr SEMICOLON { $$ = mknode("ASSIGN", $1, $3); };

// left-hand side
lhs: IDENTIFIER { $$ = mknode($1, NULL, NULL); };

// expression
expr: expr PLUS expr { $$ = mknode("PLUS", $1, $3); }
| expr MINUS expr { $$ = mknode("MINUS", $1, $3); }
| expr MULTI expr { $$ = mknode("MULTI", $1, $3); }
| expr DIVISION expr { $$ = mknode("DIVISION", $1, $3); }
| expr EQL expr { $$ = mknode("EQL", $1, $3); }
| expr NOTEQL expr { $$ = mknode("NOTEQL", $1, $3); }
| expr LESS expr { $$ = mknode("LESS", $1, $3); }
| expr LESSEQL expr { $$ = mknode("LESSEQL", $1, $3); }
| expr GREATER expr { $$ = mknode("GREATER", $1, $3); }
| expr GREATEREQL expr { $$ = mknode("GREATEREQL", $1, $3); }
| expr AND expr { $$ = mknode("AND", $1, $3); }
| expr OR expr { $$ = mknode("OR", $1, $3); }
| NOT expr { $$ = mknode("NOT", NULL, $2); }
| OPENPAREN expr CLOSEPAREN { $$ = $2; }
| IDENTIFIER { $$ = mknode($1, NULL, NULL); }
| DECIMAL_LTL { $$ = mknode($1, NULL, NULL); }
| HEX_LTL { $$ = mknode($1, NULL, NULL); }
| STRING_LTL { $$ = mknode($1, NULL, NULL); }
| CHAR_LTL { $$ = mknode($1, NULL, NULL); }
| REAL_LTL { $$ = mknode($1, NULL, NULL); }
| BOOLTRUE { $$ = mknode("TRUE", NULL, NULL); }
| BOOLFALSE { $$ = mknode("FALSE", NULL, NULL); }
| NULLL { $$ = mknode("NULL", NULL, NULL); }
;

// Added missing rules
address_expr: IDENTIFIER { $$ = mknode($1, NULL, NULL); }
| dereference_expr { $$ = $1; }
| address_exprs { $$ = $1; };

address_exprs: address_expr { $$ = $1; }
| address_exprs COMMA address_expr { $$ = mknode("ADDRESS_EXPR", $1, $3); };

dereference_expr: DEREFERENCE IDENTIFIER { $$ = mknode("DEREFERENCE", $2, NULL); };

expr_list: expr { $$ = $1; }
| expr_list COMMA expr { $$ = mknode("EXPR_LIST", $1, $3); };

call_func: IDENTIFIER OPENPAREN expr_list CLOSEPAREN { $$ = mknode("CALL_FUNC", mknode($1, NULL, NULL), $3); }
| IDENTIFIER OPENPAREN CLOSEPAREN { $$ = mknode("CALL_FUNC", mknode($1, NULL, NULL), NULL); };

%%

node* mknode(char* token, node *left, node *right)
{
    node *newnode = (node*)malloc(sizeof(node));
    newnode->token = strdup(token);
    newnode->left = left;
    newnode->right = right;
    return newnode;
}

void Printtree(node *tree)
{
    if(tree != NULL)
    {
        printTabs(printlevel);
        printlevel++;
        printf("[%s]\n", tree->token);
        Printtree(tree->left);
        Printtree(tree->right);
        printlevel--;
    }
}

void printTabs(int n)
{
    for(int i = 0; i < n; i++)
    {
        printf("\t");
    }
}

void yyerror(const char *s)
{
    fprintf(stderr, "Error: %s\n", s);
}

int main(void)
{
    if (yyparse() == 0)
    {
        printf("Parse successful.\n");
        Printtree(ast_root);
        // free_ast(ast_root);  // Implement if necessary
    }
    else
    {
        printf("Parse failed.\n");
    }
    return 0;
}
