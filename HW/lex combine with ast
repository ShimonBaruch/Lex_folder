%{
#include "y.tab.h"
#include <stdlib.h>
#include <string.h>

typedef struct ast_node {
    char *token;
    struct ast_node *left;
    struct ast_node *right;
} ASTNode;

ASTNode *mknode(char *token, ASTNode *left, ASTNode *right) {
    ASTNode *newNode = (ASTNode *)malloc(sizeof(ASTNode));
    newNode->token = strdup(token);
    newNode->left = left;
    newNode->right = right;
    return newNode;
}

%}

%option noyywrap

%%
"bool"      { return BOOL; }
"char"      { return CHAR; }
"int"       { return INT; }
"double"    { return DOUBLE; }
"float"     { return FLOAT; }
"string"    { return STRING; }
"int\\*"    { return INT_PTR; }
"char\\*"   { return CHAR_PTR; }
"double\\*" { return DOUBLE_PTR; }
"float\\*"  { return FLOAT_PTR; }
"if"        { return IF; }
"else"      { return ELSE; }
"while"     { return WHILE; }
"for"       { return FOR; }
"var"       { return VAR; }
"args>>"    { return ARGS; }
"public"    { return PUBLIC; }
"private"   { return PRIVATE; }
"static"    { return STATIC; }
"return"    { return RETURN; }
"null"      { return NULLPTR; }
"void"      { return VOID; }
"do"        { return DO; }

"&&"        { return AND; }
"||"        { return OR; }
"=="        { return EQ; }
"!="        { return NE; }
"<="        { return LE; }
">="        { return GE; }
"<"         { return LT; }
">"         { return GT; }
"+"         { return PLUS; }
"-"         { return MINUS; }
"*"         { return TIMES; }
"/"         { return DIVIDE; }
"!"         { return NOT; }
"&"         { return ADDR; }
"<-"        { return ASSIGN; }

[0-9]+      { yylval.node = mknode(yytext, NULL, NULL); return INT_LIT; }
\"([^\\\"]|\\.)*\"   { yylval.node = mknode(yytext, NULL, NULL); return STRING_LIT; }
\'[^\']\'   { yylval.node = mknode(yytext, NULL, NULL); return CHAR_LIT; }

[a-zA-Z_][a-zA-Z0-9_]* { yylval.node = mknode(yytext, NULL, NULL); return ID; }

";"         { return SEMICOLON; }
","         { return COMMA; }
"{"         { return LBRACE; }
"}"         { return RBRACE; }
"("         { return LPAREN; }
")"         { return RPAREN; }
"["         { return LBRACKET; }
"]"         { return RBRACKET; }
":"         { return COLON; }

[ \t\n\r]+  { /* ignore whitespace */ }

.           { printf("Unknown character: %s\n", yytext); exit(1); }
%%

int yywrap() {
    return 1;
}
