ast
לביטויים מתמטיים 

-----------------------------------------------------
lex part:
-----------------------------------------------------

%%
[0-9]+ {yylval = mknode(yytext,NULL,NULL);return NUM;}
[a-zA-z][a-zA-Z0-9]* {yylval = mknode(yytext,NULL,NULL);return ID;}
[\t ] ;
. {yylval = mknode(yytext,NULL,NULL);return yytext[0];}
%%




-----------------------------------------------------
yacc parse:
-----------------------------------------------------

%token NUM ID
%left '+' '-'
%left '*' '/'
%{
    #include<stdio.h>
    #include<string.h>
    #include<stdlib.h>
    typedef struct node
    {
        char *token;
        struct node *left;
        struct node *right;
    } node;
    node *mknode(char *token, node *left, node *right);
    void printtree(node *tree, int tabs);
    #define YYSTYPE struct node*
%}

%%
s: assignments {printtree($1, -1); printf("\n");};
assignments: assign assignments {$$ = mknode("", $1, $2);}| {$$ = mknode("",NULL,NULL);};
assign: ID '=' expr ';' {$$ = mknode($2->token, $1, $3);};
expr: expr '+' expr {$$ = mknode($2->token, $1, $3);}
    |expr '-' expr {$$ = mknode($2->token, $1, $3);}
    |expr '*' expr {$$ = mknode($2->token, $1, $3);}
    |expr '/' expr {$$ = mknode($2->token, $1, $3);}
    |'(' expr ')' {$$ = mknode("", mknode("(", $2, NULL), mknode(")", NULL, NULL));}
    |ID {$$ = $1;}
    |NUM {$$ = $1;}; 
%%
#include "lex.yy.c"

int main()
{
    return yyparse();
}

node *mknode(char *token,node *left,node *right) { 
    node *newnode = (node*)malloc(sizeof(node)); 
    char *newstr = (char*)malloc(sizeof(token) + 1); 
    strcpy(newstr,token); 
    newnode->left = left; 
    newnode->right = right; 
    newnode->token = newstr; 
    return newnode; 
}

void printtree(node *tree, int tabs){
    for(int i=0; i<tabs;i++,printf("\t"));
    if(strcmp(tree->token,""))
        printf("%s\n", tree->token);
    if(tree->left)
        printtree(tree->left, tabs+1);
    if(tree->right)
        printtree(tree->right, tabs+1);
}

int yyerror()
{
    printf("Couldn't finish parsing.\n");
    return 0;
}




-----------------------------------------------------
input file:
-----------------------------------------------------
X=5+7+z;
y=y/6*7;

